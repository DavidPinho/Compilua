package parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\002\000\002\004\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\010\005\000\002\010\007\000\002\010\006\000\002" +
    "\010\003\000\002\010\004\000\002\010\005\000\002\010" +
    "\003\000\002\010\004\000\002\012\013\000\002\012\010" +
    "\000\002\013\004\000\002\013\002\000\002\014\011\000" +
    "\002\015\007\000\002\015\002\000\002\016\004\000\002" +
    "\016\002\000\002\027\005\000\002\027\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\017\005" +
    "\000\002\020\005\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\030\004\000\002\031\005\000\002" +
    "\031\002\000\002\022\003\000\002\022\006\000\002\022" +
    "\005\000\002\032\004\000\002\033\005\000\002\033\002" +
    "\000\002\034\004\000\002\034\002\000\002\035\004\000" +
    "\002\036\005\000\002\036\002\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\005\000\002\043\004\000" +
    "\002\044\003\000\002\044\005\000\002\023\004\000\002" +
    "\023\006\000\002\024\004\000\002\024\005\000\002\024" +
    "\003\000\002\024\003\000\002\025\004\000\002\006\006" +
    "\000\002\006\007\000\002\037\003\000\002\037\005\000" +
    "\002\037\003\000\002\007\004\000\002\007\005\000\002" +
    "\040\005\000\002\041\005\000\002\041\002\000\002\042" +
    "\003\000\002\042\002\000\002\026\007\000\002\026\005" +
    "\000\002\026\003\000\002\045\003\000\002\045\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\030\002\ufffd\010\ufffd\011\ufffd\013\ufffd\017" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\037\ufffd\066\ufffd" +
    "\001\002\000\004\002\266\001\002\000\040\002\ufffa\007" +
    "\ufffa\010\006\011\007\012\ufffa\013\013\015\ufffa\016\ufffa" +
    "\017\021\022\023\023\014\024\026\025\025\037\012\066" +
    "\010\001\002\000\034\022\051\032\033\033\053\034\050" +
    "\035\034\037\012\041\042\061\045\062\040\063\036\064" +
    "\047\065\044\066\010\001\002\000\030\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\037\ufffd\066\ufffd\001\002\000\130\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda" +
    "\065\uffda\066\uffda\001\002\000\016\026\145\027\247\030" +
    "\144\037\251\041\042\065\245\001\002\000\034\022\051" +
    "\032\033\033\053\034\050\035\034\037\012\041\042\061" +
    "\045\062\040\063\036\064\047\065\044\066\010\001\002" +
    "\000\034\022\051\032\033\033\053\034\050\035\034\037" +
    "\012\041\042\061\045\062\040\063\036\064\047\065\044" +
    "\066\010\001\002\000\006\022\216\066\061\001\002\000" +
    "\042\002\ufff2\004\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\037\ufff2\066\ufff2\001\002\000\042\002\ufff5" +
    "\004\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\037\ufff5\066\ufff5\001\002\000\004\005\214\001\002\000" +
    "\016\002\ufffc\004\213\007\ufffc\012\ufffc\015\ufffc\016\ufffc" +
    "\001\002\000\004\066\171\001\002\000\014\002\000\007" +
    "\000\012\000\015\000\016\000\001\002\000\004\066\160" +
    "\001\002\000\022\005\uffdb\020\152\026\uffc4\027\uffc4\030" +
    "\uffc4\037\uffc4\041\uffc4\065\uffc4\001\002\000\016\002\uffe3" +
    "\004\uffe3\007\uffe3\012\uffe3\015\uffe3\016\uffe3\001\002\000" +
    "\050\002\uffe5\004\uffe5\007\uffe5\012\uffe5\015\uffe5\016\uffe5" +
    "\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\041" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\001\002\000\042\002\uffff\004\030\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\013\uffff\015\uffff\016\uffff\017\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\037\uffff\066\uffff\001\002\000" +
    "\040\002\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\037\ufffe\066\ufffe\001\002\000\034\022\051\032\033" +
    "\033\053\034\050\035\034\037\012\041\042\061\045\062" +
    "\040\063\036\064\047\065\044\066\010\001\002\000\016" +
    "\002\uffe4\004\uffe4\007\uffe4\012\uffe4\015\uffe4\016\uffe4\001" +
    "\002\000\114\002\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\031\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\066\uffcf\001" +
    "\002\000\114\002\uffca\004\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca\031\uffca" +
    "\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\066\uffca\001" +
    "\002\000\034\022\051\032\033\033\053\034\050\035\034" +
    "\037\012\041\042\061\045\062\040\063\036\064\047\065" +
    "\044\066\010\001\002\000\034\022\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\037\uff9b\041\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\001\002\000\120\002\uffc8" +
    "\004\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\145\030\144\031\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\066\uffc8\001\002" +
    "\000\034\022\uff99\032\uff99\033\uff99\034\uff99\035\uff99\037" +
    "\uff99\041\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\001\002\000\106\002\uffd2\004\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\143\022\uffd2\023\uffd2\024\uffd2\025\uffd2\036" +
    "\134\037\uffd2\040\uffd2\043\123\044\120\045\116\046\133" +
    "\047\127\050\122\051\132\052\126\053\117\054\124\055" +
    "\131\056\121\057\125\060\135\066\uffd2\001\002\000\040" +
    "\022\051\030\102\032\033\033\053\034\050\035\034\037" +
    "\012\041\042\042\077\061\045\062\040\063\036\064\047" +
    "\065\044\066\100\001\002\000\114\002\uffc9\004\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\031\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\066\uffc9\001\002\000\114\002\uffcb\004\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\031\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\066\uffcb\001\002\000\034\022\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\037\uff9a\041\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\066\uff9a\001\002\000\114\002" +
    "\uffc7\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\031\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\066\uffc7\001\002\000\114\002" +
    "\uffcc\004\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\031\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\066\uffcc\001\002\000\114\002" +
    "\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\031\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\066\uffcd\001\002\000\004\037" +
    "\055\001\002\000\120\002\uffc4\004\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\030\uffc4\031\uffc4\036\uffc4\037\uffc4\040\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\066\uffc4\001\002\000\114\002\uffce\004\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\031\uffce\036\uffce\037\uffce\040\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\066\uffce\001\002\000\114\002\uffbc\004\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\031\uffbc\036\uffbc\037\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\066\uffbc\001\002\000\010\035\057\040\056" +
    "\066\061\001\002\000\030\007\ufffd\010\ufffd\011\ufffd\013" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\037\ufffd" +
    "\066\ufffd\001\002\000\004\040\uffb7\001\002\000\004\040" +
    "\071\001\002\000\050\002\uffd5\004\uffd5\005\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\065\022\uffd5\023\uffd5\024\uffd5\025\uffd5\037\uffd5" +
    "\040\uffd5\066\uffd5\001\002\000\006\020\063\040\uffb9\001" +
    "\002\000\004\035\064\001\002\000\004\040\uffb8\001\002" +
    "\000\004\066\067\001\002\000\052\002\uffd7\004\uffd7\005" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\037\uffd7\040\uffd7\066\uffd7\001\002\000\052" +
    "\002\uffd5\004\uffd5\005\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\065\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\037\uffd5\040\uffd5\066" +
    "\uffd5\001\002\000\052\002\uffd6\004\uffd6\005\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\037\uffd6\040\uffd6\066\uffd6\001\002\000\030\007\ufffd\010" +
    "\ufffd\011\ufffd\013\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\037\ufffd\066\ufffd\001\002\000\012\007\ufff9\012" +
    "\ufff9\015\ufff9\016\ufff9\001\002\000\004\007\074\001\002" +
    "\000\114\002\uffba\004\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\022\uffba\023\uffba\024\uffba\025\uffba\031\uffba\036" +
    "\uffba\037\uffba\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\066\uffba\001\002" +
    "\000\004\007\076\001\002\000\114\002\uffbb\004\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\031\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\066\uffbb\001\002\000\114\002\uffb6\004\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\031\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\066\uffb6\001\002\000\054\004\uffda\005\141\020" +
    "\uffda\026\uffda\030\uffda\036\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\001\002" +
    "\000\046\004\uffad\020\uffad\036\134\042\uffad\043\123\044" +
    "\120\045\116\046\133\047\127\050\122\051\132\052\126" +
    "\053\117\054\124\055\131\056\121\057\125\060\135\001" +
    "\002\000\034\022\051\032\033\033\053\034\050\035\034" +
    "\037\012\041\042\061\045\062\040\063\036\064\047\065" +
    "\044\066\010\001\002\000\010\004\uffb2\020\uffb2\042\uffb2" +
    "\001\002\000\004\042\105\001\002\000\114\002\uffb5\004" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\031\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\066\uffb5\001\002\000\010\004\111\020" +
    "\110\042\uffb0\001\002\000\004\042\uffb4\001\002\000\040" +
    "\022\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037" +
    "\uffac\041\uffac\042\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\001\002\000\040\022\uffab\030\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\037\uffab\041\uffab\042\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\001" +
    "\002\000\040\022\051\030\102\032\033\033\053\034\050" +
    "\035\034\037\012\041\042\042\uffb1\061\045\062\040\063" +
    "\036\064\047\065\044\066\100\001\002\000\010\004\uffb3" +
    "\020\uffb3\042\uffb3\001\002\000\042\031\130\036\134\043" +
    "\123\044\120\045\116\046\133\047\127\050\122\051\132" +
    "\052\126\053\117\054\124\055\131\056\121\057\125\060" +
    "\135\001\002\000\034\022\051\032\033\033\053\034\050" +
    "\035\034\037\012\041\042\061\045\062\040\063\036\064" +
    "\047\065\044\066\010\001\002\000\034\022\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\037\uffa8\041\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000\034" +
    "\022\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\041" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\001\002\000\034\022\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\037\uffa9\041\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\001\002\000\034\022\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\041\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\001\002\000\034\022" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\041\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\034\022\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\037\uffaa\041\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\001\002\000\034\022\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\037\uffa1\041\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\001\002\000\034\022\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\037\uff9d\041\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002" +
    "\000\034\022\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\041\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\001\002\000\034\022\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\037\uffa6\041\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\001\002\000\004\005\136\001" +
    "\002\000\034\022\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\037\uff9f\041\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\001\002\000\034\022\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\037\uffa2\041\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000\034\022\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7\041\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002" +
    "\000\034\022\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037" +
    "\uffa4\041\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\001\002\000\034\022\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\037\uff9c\041\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\001\002\000\034\022\051\032" +
    "\033\033\053\034\050\035\034\037\012\041\042\061\045" +
    "\062\040\063\036\064\047\065\044\066\010\001\002\000" +
    "\046\004\uffaf\020\uffaf\036\134\042\uffaf\043\123\044\120" +
    "\045\116\046\133\047\127\050\122\051\132\052\126\053" +
    "\117\054\124\055\131\056\121\057\125\060\135\001\002" +
    "\000\114\002\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\031\uffc6\036" +
    "\134\037\uffc6\040\uffc6\042\uffc6\043\123\044\120\045\116" +
    "\046\133\047\127\050\122\051\132\052\126\053\117\054" +
    "\124\055\131\056\121\057\125\060\135\066\uffc6\001\002" +
    "\000\034\022\051\032\033\033\053\034\050\035\034\037" +
    "\012\041\042\061\045\062\040\063\036\064\047\065\044" +
    "\066\010\001\002\000\046\004\uffae\020\uffae\036\134\042" +
    "\uffae\043\123\044\120\045\116\046\133\047\127\050\122" +
    "\051\132\052\126\053\117\054\124\055\131\056\121\057" +
    "\125\060\135\001\002\000\034\022\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\037\uffd1\041\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000\034\022\051" +
    "\032\033\033\053\034\050\035\034\037\012\041\042\061" +
    "\045\062\040\063\036\064\047\065\044\066\010\001\002" +
    "\000\004\066\146\001\002\000\130\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\065" +
    "\uffd8\066\uffd8\001\002\000\042\031\150\036\134\043\123" +
    "\044\120\045\116\046\133\047\127\050\122\051\132\052" +
    "\126\053\117\054\124\055\131\056\121\057\125\060\135" +
    "\001\002\000\130\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\065\uffd9\066\uffd9\001" +
    "\002\000\114\002\uffc5\004\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\031\uffc5" +
    "\036\134\037\uffc5\040\uffc5\042\uffc5\043\123\044\120\045" +
    "\116\046\133\047\127\050\122\051\132\052\126\053\117" +
    "\054\124\055\131\056\121\057\125\060\135\066\uffc5\001" +
    "\002\000\006\037\012\066\010\001\002\000\004\005\uffdd" +
    "\001\002\000\012\005\uffdb\020\152\026\uffc4\030\uffc4\001" +
    "\002\000\006\026\145\030\144\001\002\000\004\005\uffdc" +
    "\001\002\000\004\037\055\001\002\000\010\026\162\027" +
    "\uffe0\037\uffe0\001\002\000\006\027\165\037\uffde\001\002" +
    "\000\004\066\163\001\002\000\010\026\162\027\uffe0\037" +
    "\uffe0\001\002\000\006\027\uffe1\037\uffe1\001\002\000\004" +
    "\066\167\001\002\000\004\037\uffe2\001\002\000\004\037" +
    "\uffdf\001\002\000\042\002\ufff3\004\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\037\ufff3\066\ufff3\001\002" +
    "\000\010\005\201\020\065\021\uffd5\001\002\000\004\021" +
    "\174\001\002\000\042\002\ufff4\004\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\037\ufff4\066\ufff4\001\002" +
    "\000\034\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037" +
    "\uffd0\041\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\001\002\000\004\006\176\001\002\000\030\007" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\017\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\037\ufffd\066\ufffd\001\002\000\004\007" +
    "\200\001\002\000\042\002\uffef\004\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\037\uffef\066\uffef\001\002" +
    "\000\034\022\051\032\033\033\053\034\050\035\034\037" +
    "\012\041\042\061\045\062\040\063\036\064\047\065\044" +
    "\066\010\001\002\000\042\020\203\036\134\043\123\044" +
    "\120\045\116\046\133\047\127\050\122\051\132\052\126" +
    "\053\117\054\124\055\131\056\121\057\125\060\135\001" +
    "\002\000\034\022\051\032\033\033\053\034\050\035\034" +
    "\037\012\041\042\061\045\062\040\063\036\064\047\065" +
    "\044\066\010\001\002\000\044\006\uffed\020\205\036\134" +
    "\043\123\044\120\045\116\046\133\047\127\050\122\051" +
    "\132\052\126\053\117\054\124\055\131\056\121\057\125" +
    "\060\135\001\002\000\034\022\051\032\033\033\053\034" +
    "\050\035\034\037\012\041\042\061\045\062\040\063\036" +
    "\064\047\065\044\066\010\001\002\000\004\006\207\001" +
    "\002\000\030\007\ufffd\010\ufffd\011\ufffd\013\ufffd\017\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\037\ufffd\066\ufffd\001" +
    "\002\000\004\007\211\001\002\000\042\002\ufff0\004\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\037\ufff0" +
    "\066\ufff0\001\002\000\042\006\uffee\036\134\043\123\044" +
    "\120\045\116\046\133\047\127\050\122\051\132\052\126" +
    "\053\117\054\124\055\131\056\121\057\125\060\135\001" +
    "\002\000\014\002\ufffb\007\ufffb\012\ufffb\015\ufffb\016\ufffb" +
    "\001\002\000\034\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\037\uffd0\041\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\001\002\000\042\002\ufff8\004\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\037\ufff8\066" +
    "\ufff8\001\002\000\004\066\224\001\002\000\042\002\ufff1" +
    "\004\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\037\ufff1\066\ufff1\001\002\000\044\002\uffd3\004\uffd3\005" +
    "\222\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\037" +
    "\uffd3\066\uffd3\001\002\000\042\002\uffe6\004\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\037\uffe6\066\uffe6" +
    "\001\002\000\034\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\037\uffd0\041\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\001\002\000\042\002\uffd4\004\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\037\uffd4\066" +
    "\uffd4\001\002\000\004\037\055\001\002\000\042\002\uffe7" +
    "\004\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\037\uffe7\066\uffe7\001\002\000\042\014\227\036\134\043" +
    "\123\044\120\045\116\046\133\047\127\050\122\051\132" +
    "\052\126\053\117\054\124\055\131\056\121\057\125\060" +
    "\135\001\002\000\034\007\ufffd\010\ufffd\011\ufffd\013\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\037\ufffd\066\ufffd\001\002\000\010\007\uffea\015\232" +
    "\016\uffea\001\002\000\006\007\uffe8\016\240\001\002\000" +
    "\034\022\051\032\033\033\053\034\050\035\034\037\012" +
    "\041\042\061\045\062\040\063\036\064\047\065\044\066" +
    "\010\001\002\000\042\014\234\036\134\043\123\044\120" +
    "\045\116\046\133\047\127\050\122\051\132\052\126\053" +
    "\117\054\124\055\131\056\121\057\125\060\135\001\002" +
    "\000\034\007\ufffd\010\ufffd\011\ufffd\013\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\037\ufffd" +
    "\066\ufffd\001\002\000\010\007\uffea\015\232\016\uffea\001" +
    "\002\000\006\007\uffeb\016\uffeb\001\002\000\004\007\242" +
    "\001\002\000\030\007\ufffd\010\ufffd\011\ufffd\013\ufffd\017" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\037\ufffd\066\ufffd" +
    "\001\002\000\004\007\uffe9\001\002\000\042\002\uffec\004" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\016\uffec\017\uffec\022\uffec\023\uffec\024\uffec\025\uffec\037" +
    "\uffec\066\uffec\001\002\000\042\036\134\040\244\043\123" +
    "\044\120\045\116\046\133\047\127\050\122\051\132\052" +
    "\126\053\117\054\124\055\131\056\121\057\125\060\135" +
    "\001\002\000\126\002\uffc3\004\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\065\uffc3\066\uffc3\001\002\000" +
    "\042\002\uffbd\004\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\015\uffbd\016\uffbd\017\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\037\uffbd\066\uffbd\001\002\000\042\002\uffc2" +
    "\004\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\037\uffc2\066\uffc2\001\002\000\004\066\255\001\002\000" +
    "\042\002\uffbe\004\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\015\uffbe\016\uffbe\017\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\037\uffbe\066\uffbe\001\002\000\036\022\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\252\041" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\001\002\000\042\002\uffc0\004\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\037\uffc0\066\uffc0\001\002\000" +
    "\004\040\254\001\002\000\042\002\uffbf\004\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\037\uffbf\066\uffbf" +
    "\001\002\000\010\037\251\041\042\065\245\001\002\000" +
    "\042\002\uffc1\004\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\015\uffc1\016\uffc1\017\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\037\uffc1\066\uffc1\001\002\000\004\012\260" +
    "\001\002\000\034\022\051\032\033\033\053\034\050\035" +
    "\034\037\012\041\042\061\045\062\040\063\036\064\047" +
    "\065\044\066\010\001\002\000\100\002\ufff6\004\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\036\134\037" +
    "\ufff6\043\123\044\120\045\116\046\133\047\127\050\122" +
    "\051\132\052\126\053\117\054\124\055\131\056\121\057" +
    "\125\060\135\066\ufff6\001\002\000\042\006\263\036\134" +
    "\043\123\044\120\045\116\046\133\047\127\050\122\051" +
    "\132\052\126\053\117\054\124\055\131\056\121\057\125" +
    "\060\135\001\002\000\030\007\ufffd\010\ufffd\011\ufffd\013" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\037\ufffd" +
    "\066\ufffd\001\002\000\004\007\265\001\002\000\042\002" +
    "\ufff7\004\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\037\ufff7\066\ufff7\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\022\004\021\010\026\011\017\014\015\022\023" +
    "\023\014\030\016\044\010\001\001\000\016\007\045\022" +
    "\051\025\042\043\261\044\036\047\034\001\001\000\010" +
    "\002\071\003\004\005\256\001\001\000\002\001\001\000" +
    "\006\007\247\024\245\001\001\000\016\007\045\022\051" +
    "\025\042\043\242\044\036\047\034\001\001\000\016\007" +
    "\045\022\051\025\042\043\225\044\036\047\034\001\001" +
    "\000\006\027\216\032\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\172\032\171\001\001\000\002\001\001\000\004\017" +
    "\156\001\001\000\004\031\152\001\001\000\002\001\001" +
    "\000\006\035\031\036\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\045\022\051\025\042\043\040" +
    "\044\036\047\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\045\022\051\025\042" +
    "\043\150\044\036\047\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\114\001\001" +
    "\000\022\007\045\022\051\025\042\026\102\040\103\043" +
    "\100\044\036\047\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\061\037\057\001\001\000\010\002\071\003\004\005\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\067\001\001\000\002\001\001\000\010\002\071\003\004" +
    "\005\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\114\001\001\000" +
    "\016\007\045\022\051\025\042\043\113\044\036\047\034" +
    "\001\001\000\004\041\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\106\045\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\045\022\051\025\042\026\112\043\100\044\036\047\034" +
    "\001\001\000\002\001\001\000\004\046\114\001\001\000" +
    "\016\007\045\022\051\025\042\043\137\044\036\047\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\045\022\051\025\042\043\136\044\036" +
    "\047\034\001\001\000\004\046\114\001\001\000\004\046" +
    "\114\001\001\000\016\007\045\022\051\025\042\043\141" +
    "\044\036\047\034\001\001\000\004\046\114\001\001\000" +
    "\002\001\001\000\016\007\045\022\051\025\042\043\146" +
    "\044\036\047\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\114\001\001\000\002\001\001\000\004" +
    "\046\114\001\001\000\006\022\153\044\154\001\001\000" +
    "\002\001\001\000\004\031\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\167\001\001\000\004\020" +
    "\160\001\001\000\004\021\165\001\001\000\002\001\001" +
    "\000\004\020\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\174\036\030\001\001\000\002\001\001" +
    "\000\010\002\071\003\004\005\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\045\022\051\025\042" +
    "\043\201\044\036\047\034\001\001\000\004\046\114\001" +
    "\001\000\016\007\045\022\051\025\042\043\203\044\036" +
    "\047\034\001\001\000\006\013\205\046\114\001\001\000" +
    "\016\007\045\022\051\025\042\043\211\044\036\047\034" +
    "\001\001\000\002\001\001\000\010\002\071\003\004\005" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\114\001\001\000\002\001\001\000\006\035\214\036" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\220\001\001\000\002\001\001\000" +
    "\006\035\222\036\030\001\001\000\002\001\001\000\004" +
    "\006\224\001\001\000\002\001\001\000\004\046\114\001" +
    "\001\000\010\002\071\003\004\005\227\001\001\000\004" +
    "\015\230\001\001\000\004\016\236\001\001\000\016\007" +
    "\045\022\051\025\042\043\232\044\036\047\034\001\001" +
    "\000\004\046\114\001\001\000\010\002\071\003\004\005" +
    "\234\001\001\000\004\015\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\071\003\004\005\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\252" +
    "\036\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\247\024\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\045\022\051\025" +
    "\042\043\260\044\036\047\034\001\001\000\004\046\114" +
    "\001\001\000\004\046\114\001\001\000\010\002\071\003" +
    "\004\005\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= trecho EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // trecho ::= trecho1 trecho2 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(t2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // trecho1 ::= trecho1 comando 
            {
              Object RESULT =null;
		 System.out.println("trecho1a");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // trecho1 ::= trecho1 comando SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("trecho1b");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // trecho1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // trecho2 ::= ultimocomando 
            {
              Object RESULT =null;
		 System.out.println("trecho2a");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // trecho2 ::= ultimocomando SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("trecho2b");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // trecho2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trecho2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloco ::= trecho 
            {
              Object RESULT =null;
		 System.out.println("bloco");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comando ::= listavar ASSIGN_OP listaexp 
            {
              Object RESULT =null;
		 System.out.println("comando");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comando ::= WHILE exp DO_KWORD bloco END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comando ::= REPEAT_KWORD bloco UNTIL_KWORD exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comando ::= ifstat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comando ::= FOR_KWORD forstat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comando ::= FUNCTION_KWORD nomedafuncao corpodafuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando ::= chamadadefuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando ::= LOCAL_KWORD localfat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // forstat ::= IDENTIFIER ASSIGN_OP exp COMA exp forcond DO_KWORD bloco END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstat",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // forstat ::= listadenomes IN_KWORD listaexp DO_KWORD bloco END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstat",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // forcond ::= COMA exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forcond",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // forcond ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forcond",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ifstat ::= IF_KWORD exp THEN_KWORD bloco elseifstat elsestat END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseifstat ::= ELSEIF_KWORD exp THEN_KWORD bloco elseifstat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifstat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseifstat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifstat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elsestat ::= ELSE_KWORD bloco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elsestat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // localfat ::= FUNCTION_KWORD IDENTIFIER corpodafuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localfat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localfat ::= listadenomes listadenomesfat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localfat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ultimocomando ::= RETURN_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimocomando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ultimocomando ::= RETURN_KWORD listaexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimocomando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ultimocomando ::= BREAK_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimocomando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nomedafuncao ::= IDENTIFIER nomedafuncaoaux1 nomedafuncaoaux2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nomedafuncao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nomedafuncaoaux1 ::= DOT IDENTIFIER nomedafuncaoaux1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nomedafuncaoaux1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nomedafuncaoaux1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nomedafuncaoaux1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nomedafuncaoaux2 ::= COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nomedafuncaoaux2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nomedafuncaoaux2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nomedafuncaoaux2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listavar ::= var listavaraux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavar",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listavaraux ::= COMA var listavaraux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavaraux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listavaraux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavaraux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("identifier");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= expprefixo LBRACKET exp RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var ::= expprefixo DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listadenomes ::= IDENTIFIER listadenomesaux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadenomes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listadenomesaux ::= COMA IDENTIFIER listadenomesaux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadenomesaux",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listadenomesaux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadenomesaux",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listadenomesfat ::= ASSIGN_OP listaexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadenomesfat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listadenomesfat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadenomesfat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaexp ::= listaexpaux exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaexp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaexpaux ::= listaexpaux exp COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaexpaux",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaexpaux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaexpaux",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NIL_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= FALSE_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= TRUE_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number n1 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("number= "+n1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= THREEDOTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= expprefixo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= construtortabela 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp opbin exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= opunaria exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expprefixo ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expprefixo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expprefixo ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expprefixo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // chamadadefuncao ::= expprefixo args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamadadefuncao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // chamadadefuncao ::= expprefixo COLON IDENTIFIER args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamadadefuncao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // args ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= LPAREN listaexp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= construtortabela 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funcao ::= FUNCTION_KWORD corpodafuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // corpodafuncao ::= LPAREN RPAREN bloco END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpodafuncao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // corpodafuncao ::= LPAREN listapar RPAREN bloco END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corpodafuncao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listapar ::= listadenomes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listapar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listapar ::= listadenomes COMA THREEDOTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listapar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listapar ::= THREEDOTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listapar",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // construtortabela ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construtortabela",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // construtortabela ::= LBRACE listadecampos RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("construtortabela",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listadecampos ::= campo listadecamposaux1 listadecamposaux2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecampos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listadecamposaux1 ::= listadecamposaux1 separadordecampos campo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecamposaux1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listadecamposaux1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecamposaux1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listadecamposaux2 ::= separadordecampos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecamposaux2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listadecamposaux2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadecamposaux2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // campo ::= LBRACKET exp RBRACKET ASSIGN_OP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // campo ::= IDENTIFIER ASSIGN_OP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // campo ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // separadordecampos ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("separadordecampos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // separadordecampos ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("separadordecampos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opbin ::= PLUS_OP 
            {
              Object RESULT =null;
		 System.out.println("+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opbin ::= MINUS_OP 
            {
              Object RESULT =null;
		 System.out.println("-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opbin ::= TIMES_OP 
            {
              Object RESULT =null;
		 System.out.println("*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opbin ::= SLASH_OP 
            {
              Object RESULT =null;
		 System.out.println("/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opbin ::= POT_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opbin ::= PERCENT_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opbin ::= TWODOTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opbin ::= LESS_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opbin ::= LESSEQUALS_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opbin ::= MORE_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opbin ::= MOREEQUALS_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opbin ::= EQUALS_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opbin ::= DIFFERENT_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opbin ::= AND_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opbin ::= OR_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opunaria ::= MINUS_UNOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opunaria",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opunaria ::= NOT_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opunaria",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opunaria ::= HASH_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opunaria",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
