package parser;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.*;
import tree.*;
import tree.Number;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\007" +
    "\000\002\004\003\000\002\004\004\000\002\005\013\000" +
    "\002\006\004\000\002\006\002\000\002\007\010\000\002" +
    "\010\004\000\002\010\002\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\004\000\002\011\006\000\002\003\004\000" +
    "\002\003\006\000\002\012\004\000\002\012\005\000\002" +
    "\012\002\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\014\010\004\011\012\012\010\015\006\042" +
    "\015\001\002\000\014\020\026\036\023\037\020\040\021" +
    "\042\022\001\002\000\004\002\104\001\002\000\004\042" +
    "\070\001\002\000\004\004\067\001\002\000\014\020\026" +
    "\036\023\037\020\040\021\042\022\001\002\000\004\004" +
    "\ufffe\001\002\000\004\042\055\001\002\000\004\004\ufffd" +
    "\001\002\000\004\004\ufffb\001\002\000\006\005\017\020" +
    "\016\001\002\000\016\020\uffe8\021\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\042\uffe8\001\002\000\014\020\026\036\023\037" +
    "\020\040\021\042\022\001\002\000\014\020\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\042\uffdb\001\002\000\056\004\ufff3\006" +
    "\ufff3\013\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\042\ufff3\001\002\000\056\004\ufff2\006\ufff2\013\ufff2\016" +
    "\ufff2\020\016\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\001\002" +
    "\000\014\020\uffda\036\uffda\037\uffda\040\uffda\042\uffda\001" +
    "\002\000\056\004\ufff1\006\ufff1\013\ufff1\016\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\042\ufff1\001\002\000\014\020" +
    "\026\036\023\037\020\040\021\042\022\001\002\000\014" +
    "\020\026\036\023\037\020\040\021\042\022\001\002\000" +
    "\034\004\uffff\022\035\023\033\024\031\025\042\026\043" +
    "\027\040\030\032\031\036\032\041\033\034\034\037\035" +
    "\044\001\002\000\014\020\026\036\023\037\020\040\021" +
    "\042\022\001\002\000\014\020\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\042\uffe5\001\002\000\014\020\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\uffe3\001\002\000\014\020\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\001\002\000\014\020\uffde\036\uffde" +
    "\037\uffde\040\uffde\042\uffde\001\002\000\014\020\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\042\uffe7\001\002\000\014\020\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\042\uffe1\001\002\000\014\020" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\001\002\000\014" +
    "\020\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\001\002\000" +
    "\014\020\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\001\002" +
    "\000\014\020\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\001" +
    "\002\000\014\020\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2" +
    "\001\002\000\014\020\uffdc\036\uffdc\037\uffdc\040\uffdc\042" +
    "\uffdc\001\002\000\056\004\uffef\006\uffef\013\uffef\016\uffef" +
    "\020\uffef\021\uffef\022\035\023\033\024\031\025\042\026" +
    "\043\027\040\030\032\031\036\032\041\033\034\034\037" +
    "\035\044\036\uffef\037\uffef\040\uffef\042\uffef\001\002\000" +
    "\034\021\047\022\035\023\033\024\031\025\042\026\043" +
    "\027\040\030\032\031\036\032\041\033\034\034\037\035" +
    "\044\001\002\000\056\004\ufff0\006\ufff0\013\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\001\002\000" +
    "\056\004\uffee\006\uffee\013\uffee\016\uffee\020\uffee\021\uffee" +
    "\022\035\023\033\024\031\025\042\026\043\027\040\030" +
    "\032\031\036\032\041\033\034\034\037\035\044\036\uffee" +
    "\037\uffee\040\uffee\042\uffee\001\002\000\016\020\026\021" +
    "\053\036\023\037\020\040\021\042\022\001\002\000\050" +
    "\016\054\020\uffea\021\uffea\022\035\023\033\024\031\025" +
    "\042\026\043\027\040\030\032\031\036\032\041\033\034" +
    "\034\037\035\044\036\uffea\037\uffea\040\uffea\042\uffea\001" +
    "\002\000\056\004\uffed\006\uffed\013\uffed\016\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\042\uffed\001\002\000\016\020" +
    "\uffe9\021\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\001\002" +
    "\000\006\004\uffec\005\056\001\002\000\014\020\026\036" +
    "\023\037\020\040\021\042\022\001\002\000\034\004\uffeb" +
    "\022\035\023\033\024\031\025\042\026\043\027\040\030" +
    "\032\031\036\032\041\033\034\034\037\035\044\001\002" +
    "\000\034\013\061\022\035\023\033\024\031\025\042\026" +
    "\043\027\040\030\032\031\036\032\041\033\034\034\037" +
    "\035\044\001\002\000\014\010\004\011\012\012\010\015" +
    "\006\042\015\001\002\000\006\007\ufff4\014\064\001\002" +
    "\000\004\007\066\001\002\000\014\010\004\011\012\012" +
    "\010\015\006\042\015\001\002\000\004\007\ufff5\001\002" +
    "\000\004\004\ufff6\001\002\000\010\002\000\007\000\014" +
    "\000\001\002\000\004\005\072\001\002\000\004\004\ufffa" +
    "\001\002\000\014\020\026\036\023\037\020\040\021\042" +
    "\022\001\002\000\034\016\074\022\035\023\033\024\031" +
    "\025\042\026\043\027\040\030\032\031\036\032\041\033" +
    "\034\034\037\035\044\001\002\000\014\020\026\036\023" +
    "\037\020\040\021\042\022\001\002\000\036\006\ufff7\016" +
    "\076\022\035\023\033\024\031\025\042\026\043\027\040" +
    "\030\032\031\036\032\041\033\034\034\037\035\044\001" +
    "\002\000\014\020\026\036\023\037\020\040\021\042\022" +
    "\001\002\000\004\006\100\001\002\000\014\010\004\011" +
    "\012\012\010\015\006\042\015\001\002\000\004\007\102" +
    "\001\002\000\004\004\ufff9\001\002\000\034\006\ufff8\022" +
    "\035\023\033\024\031\025\042\026\043\027\040\030\032" +
    "\031\036\032\041\033\034\034\037\035\044\001\002\000" +
    "\004\002\001\001\002\000\034\006\106\022\035\023\033" +
    "\024\031\025\042\026\043\027\040\030\032\031\036\032" +
    "\041\033\034\034\037\035\044\001\002\000\014\010\004" +
    "\011\012\012\010\015\006\042\015\001\002\000\004\007" +
    "\110\001\002\000\004\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\014\002\004\003\012\004\006\007\013\011" +
    "\010\001\001\000\010\011\023\014\104\016\024\001\001" +
    "\000\002\001\001\000\004\005\070\001\001\000\002\001" +
    "\001\000\010\011\023\014\057\016\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\050\001\001\000\010" +
    "\011\023\014\026\016\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\023\014\047\016\024\001\001\000" +
    "\010\011\023\014\045\016\024\001\001\000\004\015\027" +
    "\001\001\000\010\011\023\014\044\016\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\027\001" +
    "\001\000\004\015\027\001\001\000\002\001\001\000\004" +
    "\015\027\001\001\000\010\011\023\014\051\016\024\001" +
    "\001\000\004\015\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\023\014\056\016" +
    "\024\001\001\000\004\015\027\001\001\000\004\015\027" +
    "\001\001\000\014\002\061\003\012\004\006\007\013\011" +
    "\010\001\001\000\004\010\062\001\001\000\002\001\001" +
    "\000\014\002\064\003\012\004\006\007\013\011\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\023\014" +
    "\072\016\024\001\001\000\004\015\027\001\001\000\010" +
    "\011\023\014\074\016\024\001\001\000\006\006\076\015" +
    "\027\001\001\000\010\011\023\014\102\016\024\001\001" +
    "\000\002\001\001\000\014\002\100\003\012\004\006\007" +
    "\013\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\027\001\001\000\002\001\001\000\004\015" +
    "\027\001\001\000\014\002\106\003\012\004\006\007\013" +
    "\011\010\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloco EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bloco ::= comando SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("bloco");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // comando ::= IDENTIFIER ASSIGN_OP exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Assign(id, (Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // comando ::= chamadadefuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comando ::= declaracaodevariavel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comando ::= WHILE exp DO_KWORD bloco END_KWORD 
            {
              Object RESULT =null;
		 System.out.println("while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comando ::= ifstat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comando ::= FOR_KWORD forstat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // forstat ::= IDENTIFIER ASSIGN_OP exp COMA exp forcond DO_KWORD bloco END_KWORD 
            {
              Object RESULT =null;
		 System.out.println("for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // forcond ::= COMA exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forcond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // forcond ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forcond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ifstat ::= IF_KWORD exp THEN_KWORD bloco elsestat END_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elsestat ::= ELSE_KWORD bloco 
            {
              Object RESULT =null;
		 System.out.println("else");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elsestat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number n1 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp(new Number(n1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= IDENTIFIER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp(new Identifier(s));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= chamadadefuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp opbin exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= opunaria exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // chamadadefuncao ::= IDENTIFIER LPAREN listaexp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamadadefuncao",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracaodevariavel ::= VAR_KWORD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaodevariavel",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracaodevariavel ::= VAR_KWORD IDENTIFIER ASSIGN_OP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaodevariavel",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaexp ::= listaexp exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaexp ::= listaexp exp COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaexp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opbin ::= PLUS_OP 
            {
              Object RESULT =null;
		 System.out.println("+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opbin ::= MINUS_OP 
            {
              Object RESULT =null;
		 System.out.println("-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opbin ::= TIMES_OP 
            {
              Object RESULT =null;
		 System.out.println("*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opbin ::= SLASH_OP 
            {
              Object RESULT =null;
		 System.out.println("/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opbin ::= LESS_OP 
            {
              Object RESULT =null;
		 System.out.println("<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opbin ::= LESSEQUALS_OP 
            {
              Object RESULT =null;
		 System.out.println("<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opbin ::= MORE_OP 
            {
              Object RESULT =null;
		 System.out.println(">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opbin ::= MOREEQUALS_OP 
            {
              Object RESULT =null;
		 System.out.println(">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opbin ::= EQUALS_OP 
            {
              Object RESULT =null;
		 System.out.println("==");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opbin ::= DIFFERENT_OP 
            {
              Object RESULT =null;
		 System.out.println("NOTEQUAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opbin ::= AND_KWORD 
            {
              Object RESULT =null;
		 System.out.println("AND");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opbin ::= OR_KWORD 
            {
              Object RESULT =null;
		 System.out.println("OR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opunaria ::= MINUS_UNOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opunaria",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opunaria ::= NOT_KWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opunaria",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
