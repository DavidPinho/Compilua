import java_cup.runtime.*;
import tree.*;


/* Terminals (tokens returned by lexer). */

terminal      SEMICOLON, ASSIGN_OP, DO_KWORD, END_KWORD, WHILE;
terminal      VAR_KWORD, IF_KWORD, THEN_KWORD;
terminal      ELSE_KWORD, FOR_KWORD, COMA, FUNCTION_KWORD;
terminal      LPAREN, RPAREN;
terminal      PLUS_OP, MINUS_OP, TIMES_OP, SLASH_OP;
terminal      LESSEQUALS_OP, MOREEQUALS_OP, LESS_OP, MORE_OP, EQUALS_OP, DIFFERENT_OP;
terminal      AND_KWORD, OR_KWORD, NOT_KWORD, MINUS_UNOP;

terminal 	  java.lang.Number NUMBER;
terminal 	  java.lang.String STRING;
terminal 	  java.lang.String IDENTIFIER;


/*NON TERMINALS */

non terminal  bloco, declaracaodevariavel;
non terminal  comando;
non terminal  forstat, forcond, ifstat, elsestat;
non terminal  chamadadefuncao;
non terminal  listaexp, listaexpaux;
non terminal  exp;
non terminal  opbin, opunaria;


//--------------- Precedences---------------------------------------------- 

precedence left COMA;
precedence left OR_KWORD;
precedence left AND_KWORD;
precedence left LESS_OP, MORE_OP, LESSEQUALS_OP, MOREEQUALS_OP, DIFFERENT_OP, EQUALS_OP;
precedence left PLUS_OP,MINUS_OP;
precedence left TIMES_OP, SLASH_OP;
precedence left NOT_KWORD, MINUS_UNOP;
precedence left LPAREN, RPAREN;




//----------------The grammar---------------------------------------------------- 

start with bloco;


bloco 	    ::= comando SEMICOLON {: System.out.println("bloco");:};


comando		::= IDENTIFIER:id ASSIGN_OP exp:e {: RESULT =  new Assign(id, e); :}
				| chamadadefuncao
				| declaracaodevariavel
				| WHILE exp DO_KWORD bloco END_KWORD {: System.out.println("while");:}
				| ifstat
				| FOR_KWORD forstat
				;
							
forstat  ::=  IDENTIFIER ASSIGN_OP exp COMA  exp forcond DO_KWORD bloco END_KWORD {: System.out.println("for");:};

forcond        ::=   COMA exp
						|
						;

ifstat 	        ::=   IF_KWORD exp THEN_KWORD bloco elsestat END_KWORD;


elsestat        ::=   ELSE_KWORD bloco {: System.out.println("else");:}
					      |
					      ;										 



exp       ::=	     NUMBER:n1 {: System.out.println("number= "+n1);:}
					   |  IDENTIFIER:s {: System.out.println(s);:}
					   |  chamadadefuncao
					   |  LPAREN exp RPAREN 
					   |  exp opbin exp
					   |  opunaria exp
					   ; 



chamadadefuncao ::=  	IDENTIFIER LPAREN listaexp RPAREN;


declaracaodevariavel ::=  VAR_KWORD IDENTIFIER
							| VAR_KWORD IDENTIFIER ASSIGN_OP exp
							;

listaexp   ::=      listaexpaux  exp;

listaexpaux  ::=    listaexpaux exp COMA 
						|
						;


opbin   ::=         PLUS_OP {: System.out.println("+");:}
						|   MINUS_OP {: System.out.println("-");:}
						|    TIMES_OP {: System.out.println("*");:}
						|    SLASH_OP {: System.out.println("/");:}
						|    LESS_OP {: System.out.println("<");:}
						|    LESSEQUALS_OP {: System.out.println("<=");:}
						|    MORE_OP  {: System.out.println(">");:}
						|    MOREEQUALS_OP {: System.out.println(">=");:}
						|    EQUALS_OP {: System.out.println("==");:}
						|    DIFFERENT_OP {: System.out.println("NOTEQUAL");:}
						|    AND_KWORD {: System.out.println("AND");:}
						|    OR_KWORD {: System.out.println("OR");:}
						;


opunaria   ::=     MINUS_UNOP
					   |   NOT_KWORD
					   ;

