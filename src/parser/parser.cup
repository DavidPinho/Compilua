import java_cup.runtime.*;
import tree.*;
import tree.Number;

parser code {:
  
    public void report_error(String message, Object info) {
    
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {        
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                      
                m.append(" in line "+(s.left+1));                   
                if (s.right >= 0)                          
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};


/* Terminals (tokens returned by lexer). */

terminal      SEMICOLON, ASSIGN_OP, DO_KWORD, END_KWORD, FOR_KWORD, WHILE;
terminal      IF_KWORD, THEN_KWORD;
terminal      ELSE_KWORD, COMA, VAR_KWORD;
terminal      DOT, COLON;
terminal      LBRACKET, RBRACKET;
terminal      LPAREN, RPAREN;
terminal      PLUS_OP, MINUS_OP, TIMES_OP, SLASH_OP, POT_OP, PERCENT_OP;
terminal      LESSEQUALS_OP, MOREEQUALS_OP, LESS_OP, MORE_OP, EQUALS_OP, DIFFERENT_OP;
terminal      AND_KWORD, OR_KWORD, NOT_KWORD, HASH_OP, MINUS_UNOP;

terminal 	  java.lang.Number NUMBER;
terminal 	  java.lang.String STRING;
terminal 	  java.lang.String IDENTIFIER;


/*NON TERMINALS */

non terminal  Bloco bloco;
non terminal  Comando comando;
non terminal  Comando ifstat;
non terminal  Bloco elsestat;
non terminal  ChamadaDeFuncao chamadadefuncao;
non terminal  ExpList listaexp;
non terminal  Exp exp;
non terminal  DeclaracaoDeVariavel declaracaovariavel;


//--------------- Precedences---------------------------------------------- 

precedence left COMA;
precedence left OR_KWORD;
precedence left AND_KWORD;
precedence left LESS_OP, MORE_OP, LESSEQUALS_OP, MOREEQUALS_OP, DIFFERENT_OP, EQUALS_OP;
precedence left PLUS_OP,MINUS_OP;
precedence left TIMES_OP, SLASH_OP;
precedence left HASH_OP, PERCENT_OP,MINUS_UNOP;
precedence left LPAREN, RPAREN;




//----------------The grammar---------------------------------------------------- 

start with bloco;


bloco 	    ::= bloco:b comando:c {: RESULT = new Bloco(b,c); :}
					| bloco:b comando:c SEMICOLON {: RESULT = new Bloco(b,c); :}
					|
					;

	
comando     ::=	IDENTIFIER:id ASSIGN_OP exp:e	 {: RESULT = new Assign(id, e);:}		       
					       | WHILE exp:e DO_KWORD bloco:b END_KWORD {: RESULT = new While(e,b); :}
					       | ifstat:if1 {: RESULT =if1; :}
				           | chamadadefuncao:f {:RESULT = f; :} 			
				           | declaracaovariavel:v {:RESULT = v; :}                        
				           ;


ifstat 	        ::=   IF_KWORD exp:exp1 THEN_KWORD bloco:b1 elsestat:b2 END_KWORD {: RESULT = new Comando(new IfComando(exp1,b1),b2);:};


elsestat        ::=   ELSE_KWORD bloco:b1  {:RESULT = b1;:}
					      |
					      ;

exp       ::=	     NUMBER:n1 {: RESULT = new Number(n1);:}
					   |  IDENTIFIER:id {: RESULT =  new Identifier(id); :}
					   |  chamadadefuncao
					   |  LPAREN exp:exp1 RPAREN	{: RESULT = new Exp(exp1);:}		
					   |  MINUS_OP exp:exp1 {: RESULT = new Exp(sym.MINUS_OP,exp1);:} %prec MINUS_UNOP
					   |  NOT_KWORD exp:exp1 {: RESULT = new Exp(sym.NOT_KWORD,exp1);:}	
					   |  exp:exp1 PLUS_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.PLUS_OP,exp2); :}
					   |  exp:exp1 MINUS_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.MINUS_OP,exp2); :}
					   |  exp:exp1 TIMES_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.TIMES_OP,exp2); :}
					   |  exp:exp1 SLASH_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.SLASH_OP,exp2); :}
					   |  exp:exp1 LESS_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.LESS_OP,exp2); :}
					   |  exp:exp1 LESSEQUALS_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.LESSEQUALS_OP,exp2); :}
					   |  exp:exp1 MORE_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.MORE_OP,exp2); :}
					   |  exp:exp1 MOREEQUALS_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.MOREEQUALS_OP,exp2); :}
					   |  exp:exp1 EQUALS_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.EQUALS_OP,exp2); :}
					   |  exp:exp1 DIFFERENT_OP exp:exp2 {: RESULT =  new Exp(exp1,sym.DIFFERENT_OP,exp2); :}
					   |  exp:exp1 AND_KWORD exp:exp2 {: RESULT =  new Exp(exp1,sym.AND_KWORD,exp2); :}		
					   |  exp:exp1 OR_KWORD exp:exp2 {: RESULT =  new Exp(exp1,sym.OR_KWORD,exp2); :}					  
					   ; 


chamadadefuncao ::=  	IDENTIFIER:id LPAREN RPAREN {:RESULT = new ChamadaDeFuncao(id);:}
							| IDENTIFIER:id LPAREN listaexp:explist RPAREN {:RESULT = new ChamadaDeFuncao(id,explist);:}
							;

listaexp   ::=      exp:e {:RESULT = new ExpList(e,null);:}
					  | exp:e COMA listaexp:el {:RESULT = new ExpList(e,el);:}
					  ;


declaracaovariavel ::= VAR_KWORD IDENTIFIER:id  {: RESULT = new DeclaracaoDeVariavel(id); :}
						| VAR_KWORD IDENTIFIER:id ASSIGN_OP exp:exp1 {: RESULT = new DeclaracaoDeVariavel(id,exp1); :}
						;