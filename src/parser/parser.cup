import java_cup.runtime.*;


/* Terminals (tokens returned by lexer). */

terminal      SEMICOLON, ASSIGN_OP, DO_KWORD, END_KWORD, WHILE;
terminal      IF_KWORD, THEN_KWORD;
terminal      ELSE_KWORD, COMA, FOR_KWORD, VAR_KWORD;
terminal      DOT, COLON;
terminal      LBRACKET, RBRACKET, NIL_KWORD, FALSE_KWORD, TRUE_KWORD;
terminal      LPAREN, RPAREN;
terminal      PLUS_OP, MINUS_OP, TIMES_OP, SLASH_OP, POT_OP, PERCENT_OP;
terminal      LESSEQUALS_OP, MOREEQUALS_OP, LESS_OP, MORE_OP, EQUALS_OP, DIFFERENT_OP;
terminal      AND_KWORD, OR_KWORD, NOT_KWORD, HASH_OP, MINUS_UNOP;

terminal 	  java.lang.Number NUMBER;
terminal 	  java.lang.String STRING;
terminal 	  java.lang.String IDENTIFIER;


/*NON TERMINALS */

non terminal  trecho;
non terminal  bloco;
non terminal  comando;
non terminal  ifstat, elsestat;
non terminal  var, chamadadefuncao, args;
non terminal  listaexp, listaexpaux;
non terminal  exp, expprefixo;
non terminal  opbin, opunaria;


//--------------- Precedences---------------------------------------------- 

precedence left COMA;
precedence left OR_KWORD;
precedence left AND_KWORD;
precedence left LESS_OP, MORE_OP, LESSEQUALS_OP, MOREEQUALS_OP, DIFFERENT_OP, EQUALS_OP;
precedence left PLUS_OP,MINUS_OP;
precedence left TIMES_OP, SLASH_OP, PERCENT_OP;
precedence left NOT_KWORD, HASH_OP, PERCENT_OP, MINUS_UNOP;
precedence right POT_OP;
precedence left LPAREN, RPAREN;




//----------------The grammar---------------------------------------------------- 

start with bloco;



trecho     ::= trecho comando {: System.out.println("trecho1a");:}
  					| trecho comando SEMICOLON {: System.out.println("trecho1b");:}
					|
					;


bloco 	    ::= trecho {: System.out.println("bloco");:};

	
comando     ::=	IDENTIFIER:id ASSIGN_OP listaexp 	 {: System.out.println(id);:}		       
					       | WHILE exp DO_KWORD bloco END_KWORD
					       | ifstat
				           | chamadadefuncao			                        
				           ;


ifstat 	        ::=   IF_KWORD exp THEN_KWORD bloco elsestat END_KWORD;

//esse n�o � necessario
elsestat        ::=   ELSE_KWORD bloco
					      |
					      ;
/* da pra substituir no elseifstat 
	ifstat 	        ::=   IF_KWORD exp THEN_KWORD bloco elseifstat END_KWORD;
elseifstat      ::=  ELSE bloco
							| ELSEIF_KWORD exp THEN_KWORD bloco  elseifstat
							|
							;
*/


var    ::=	    IDENTIFIER	 {: System.out.println("identifier");:}
					|  expprefixo LBRACKET exp RBRACKET
					|  expprefixo DOT IDENTIFIER
					;
						 


listaexp   ::=      listaexpaux  exp;

listaexpaux  ::=    listaexpaux exp COMA 
						|
						;
						


exp       ::=	     NIL_KWORD
					   |  FALSE_KWORD
					   |  TRUE_KWORD
					   |  NUMBER:n1 {: System.out.println("number= "+n1);:}
					   |  STRING
					   |  chamadadefuncao
					   |  expprefixo 
					   |  exp opbin exp
					   |  opunaria exp
					   ; 


expprefixo   ::=         var
						  |   LPAREN exp RPAREN	
						  ; 

chamadadefuncao ::=  	expprefixo args
							| expprefixo COLON IDENTIFIER args
							;


args   ::=    LPAREN RPAREN
					|  LPAREN listaexp RPAREN
					|  STRING
					;




opbin   ::=         PLUS_OP {: System.out.println("+");:}
						|   MINUS_OP {: System.out.println("-");:}
						|    TIMES_OP {: System.out.println("*");:}
						|    SLASH_OP {: System.out.println("/");:}
						|    POT_OP
						|    PERCENT_OP
						|    LESS_OP
						|    LESSEQUALS_OP
						|    MORE_OP 
						|    MOREEQUALS_OP
						|    EQUALS_OP
						|    DIFFERENT_OP
						|    AND_KWORD
						|    OR_KWORD
						;


opunaria   ::=     MINUS_UNOP
					   |   NOT_KWORD
					   |   HASH_OP
					   ;

